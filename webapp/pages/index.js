/* eslint-disable @next/next/no-img-element */
import { Spinner } from "@chakra-ui/react";
import Head from "next/head";
import Link from "next/link";
import React, { useState, useEffect } from "react";
import { reToDate, reDateTime } from "../hooks/greeter";

const IndexPage = () => {
  const [show, setShow] = useState(false);
  const [profile, setProfile] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [data, setData] = useState([]);

  const FetchData = async () => {
    setIsLoading(true);
    var requestOptions = {
      method: "GET",
      redirect: "follow",
    };

    const res = await fetch(
      `${process.env.API_HOST}/api/v1/temp?limit=60`,
      requestOptions
    );
    if (res.ok) {
      const r = await res.json();
      r.data.map((i) => {
        i.percent = ((i.temp * 100) / i.device.alert_on).toFixed(2);
      });
      setData(r.data);
      console.dir(r.data);
      setIsLoading(false);
    }
  };

  useEffect(() => {
    FetchData();
  }, []);

  return (
    <>
      <Head>
        <title>{process.env.APP_NAME}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="absolute w-full h-full mb-4">
        {/* Page title starts */}
        <div className="container flex flex-col items-start justify-between px-6 pb-4 mx-auto my-4 border-b border-gray-300 lg:my-12 lg:flex-row lg:items-center">
          <div>
            <h4 className="text-2xl font-bold leading-tight text-gray-800">
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
            </h4>
            <ul className="flex flex-col items-start mt-3 text-sm text-gray-600 md:flex-row md:items-center">
              <li className="flex items-center mt-3 mr-3 md:mt-0">
                <span className="mr-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="icon icon-tabler icon-tabler-paperclip"
                    width={16}
                    height={16}
                    viewBox="0 0 24 24"
                    strokeWidth="1.5"
                    stroke="currentColor"
                    fill="none"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path stroke="none" d="M0 0h24v24H0z" />
                    <path d="M15 7l-6.5 6.5a1.5 1.5 0 0 0 3 3l6.5 -6.5a3 3 0 0 0 -6 -6l-6.5 6.5a4.5 4.5 0 0 0 9 9 l6.5 -6.5" />
                  </svg>
                </span>
                <span>Active</span>
              </li>
              <li className="flex items-center mt-3 mr-3 md:mt-0">
                <span className="mr-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="icon icon-tabler icon-tabler-trending-up"
                    width={16}
                    height={16}
                    viewBox="0 0 24 24"
                    strokeWidth="1.5"
                    stroke="currentColor"
                    fill="none"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path stroke="none" d="M0 0h24v24H0z" />
                    <polyline points="3 17 9 11 13 15 21 7" />
                    <polyline points="14 7 21 7 21 14" />
                  </svg>
                </span>
                <span> Trending</span>
              </li>
              <li className="flex items-center mt-3 md:mt-0">
                <span className="mr-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="icon icon-tabler icon-tabler-plane-departure"
                    width={16}
                    height={16}
                    viewBox="0 0 24 24"
                    strokeWidth="1.5"
                    stroke="currentColor"
                    fill="none"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path stroke="none" d="M0 0h24v24H0z" />
                    <path
                      d="M15 12h5a2 2 0 0 1 0 4h-15l-3 -6h3l2 2h3l-2 -7h3z"
                      transform="rotate(-15 12 12) translate(0 -1)"
                    />
                    <line x1={3} y1={21} x2={21} y2={21} />
                  </svg>
                </span>
                <span>Started on {reToDate()}</span>
              </li>
            </ul>
          </div>
          <div className="mt-6 lg:mt-0">
            <Link href="/setup" target="_blank">
              <button className="px-8 py-2 text-sm text-white transition duration-150 ease-in-out bg-orange-700 border rounded hover:bg-orange-600 focus:outline-none">
                ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
              </button>
            </Link>
            {isLoading ? (
              <Spinner color="red.500" />
            ) : (
              <button
                className="px-8 py-2 text-sm text-white transition duration-150 ease-in-out bg-indigo-700 border rounded hover:bg-indigo-600 focus:outline-none"
                onClick={() => FetchData()}
              >
                ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
              </button>
            )}
          </div>
        </div>
        {/* Page title ends */}
        <div className="container px-6 mx-auto">
          {/* <div className="w-full">
            <Chart />
          </div> */}
          <div className="w-full">
            <div className="overflow-x-auto">
              <table className="table w-full table-compact table-zebra">
                <thead>
                  <tr>
                    <th>#</th>
                    <th>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th>
                    <th>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà</th>
                    <th>‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥</th>
                    <th>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô</th>
                    <th>‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ %</th>
                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                    <th>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</th>
                  </tr>
                </thead>
                <tbody>
                  {data?.map((i, x) => (
                    <tr key={i.id} className="hover">
                      <th>{x + 1}</th>
                      <td>{i.device.name}</td>
                      <td>
                        <span className="text-orange-600">
                          {i.device.alert_on.toFixed(2)}
                        </span>
                      </td>
                      <td>{i.temp.toFixed(2)}</td>
                      <td>{i.humidity.toFixed(2)}</td>
                      <td>{i.percent} %</td>
                      <td>
                        {i.temp >= i.device.alert_on ? (
                          <span className="text-rose-600">üò° ‡∏™‡∏π‡∏á</span>
                        ) : i.percent > 90 ? (
                          <span className="text-orange-600">üòì ‡∏≠‡∏∏‡πà‡∏ô</span>
                        ) : (
                          <span className="text-green-600">üò¥ ‡∏õ‡∏Å‡∏ï‡∏¥</span>
                        )}
                      </td>
                      <td>{reDateTime(i.on_date_time)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default IndexPage;
